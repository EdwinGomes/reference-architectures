kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - tlsoptions
      - tlsstores
      - traefikservices
    verbs:
      - get
      - list
      - watch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-watch-published-service
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  namespace: kube-system
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-watch-workloads
  namespace: a0008
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-ingress-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
data:
  traefik.toml: |
    [log]
    level = "INFO"
    format = "json"
    [global]
    # prevent Traefik from checking nrewer version in productions
    checknewversion = false
    # prevent Traefik from collecting and sending stats from production
    sendanonymoususage = false
    [api]
    dashboard = false
    [providers]
    # Configuration reload frequency:
    #   * duration that Traefik waits for, after a configuration reload, before taking into account any new configuration refresh event
    #   * the most recent one is taken into account, and all the previous others are dropped.
    providersThrottleDuration = 10
    # Traefik provider that supports the native Kubernetes Ingress specification
    # and derives the corresponding dynamic configuration from it. https://kubernetes.io/docs/concepts/services-networking/ingress/
    [providers.kubernetesingress]
      ingressClass = "traefik-internal"
      namespaces = ["kube-system","a0008"]
      [kubernetes.ingressEndpoint]
      publishedService = "kube-system/traefik-ingress-service"
    # Enable gzip compression
    [http.middlewares]
      [http.middlewares.test-compress.compress]
    [entryPoints]
      [entryPoints.traefik]
      address = ":9000"
      [entryPoints.web]
      address = ":8000"
      [entryPoints.websecure]
      address = ":8443"
    [ping]
    entryPoint = "traefik"
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-ingress-service
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "snet-clusteringressservices"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  selector:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
  ports:
  - port: 80
    name: http
    targetPort: web
  - port: 443
    name: https
    targetPort: websecure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik-ingress-ilb
      app.kubernetes.io/instance: traefik-ingress-ilb
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: traefik-ingress-ilb
        app.kubernetes.io/instance: traefik-ingress-ilb
    spec:
      hostNetwork: false
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - traefik-ingress-ilb
            topologyKey: "kubernetes.io/hostname"
      containers:
      - image: traefik:2.2.1
        name: traefik-ingress-controller
        resources:
        readinessProbe:
          httpGet:
            path: /ping
            port: "traefik"
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: "traefik"
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        ports:
        - name: "traefik"
          containerPort: 9000
          protocol: TCP
        - name: "web"
          containerPort: 8000
          protocol: TCP
        - name: "websecure"
          containerPort: 8443
          protocol: TCP
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            mountPath: /config
        args:
        - --configfile=/config/traefik.toml
      volumes:
        - name: config
          configMap:
            name: traefik-ingress-config
        - name: data
          emptyDir: {}
      securityContext:
        fsGroup: 65532
      nodeSelector:
       agentpool: npuser01
